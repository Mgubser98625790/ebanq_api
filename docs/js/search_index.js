var search_data = {"index":{"searchIndex":["ebanqapi","accounts","additionalinfo","apipaths","auth","badgateway","badrequest","beneficiarybank","beneficiarycustomer","cards","client","common","configuration","forbidden","gatewaytimeout","intermediarybank","internalservererror","invalidsignature","messages","news","notacceptable","notfound","profile","ratelimitexceeded","reports","requests","responsewrapper","serviceunavailable","settings","templates","toomanyrequests","transactions","account_path()","accounts()","all_accounts_balances()","all_accounts_transactions()","approve()","auth()","auth_path()","cards()","cards_path()","cft()","config()","countries()","create()","create()","create_cft()","create_owt()","create_tba()","create_tbu()","currencies()","delete()","delete()","delete_thread()","fee_types()","fields()","get()","headers()","list()","list()","list()","list()","list()","list()","list()","list_of_allowed_documents()","login()","login_by()","login_with_token()","logout()","logout_device()","make_request()","messages()","messages_path()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","news()","news_path()","operation()","outgoing()","owt()","parse_failed()","pass_reset_token()","post()","prepare()","process_raw_response()","process_response_body()","profile()","profile_path()","put()","refresh_token()","reports()","reports_path()","request_new_password()","requests()","requests_path()","reset_password()","send_to_a_group()","send_to_administrator()","send_to_all()","settings()","settings_path()","show()","show()","show()","show()","show()","show()","show()","show()","specific_account_statement()","success?()","tbu()","templates()","templates_path()","to_hash()","transactions()","transactions_path()","types()","unread_count()","update()","update()","update_push_token()","update_user_pin()","wrap()","wrap_hash()","readme"],"longSearchIndex":["ebanqapi","ebanqapi::accounts","ebanqapi::additionalinfo","ebanqapi::apipaths","ebanqapi::auth","ebanqapi::badgateway","ebanqapi::badrequest","ebanqapi::beneficiarybank","ebanqapi::beneficiarycustomer","ebanqapi::cards","ebanqapi::client","ebanqapi::common","ebanqapi::configuration","ebanqapi::forbidden","ebanqapi::gatewaytimeout","ebanqapi::intermediarybank","ebanqapi::internalservererror","ebanqapi::invalidsignature","ebanqapi::messages","ebanqapi::news","ebanqapi::notacceptable","ebanqapi::notfound","ebanqapi::profile","ebanqapi::ratelimitexceeded","ebanqapi::reports","ebanqapi::requests","ebanqapi::responsewrapper","ebanqapi::serviceunavailable","ebanqapi::settings","ebanqapi::templates","ebanqapi::toomanyrequests","ebanqapi::transactions","ebanqapi::apipaths#account_path()","ebanqapi::client#accounts()","ebanqapi::reports#all_accounts_balances()","ebanqapi::reports#all_accounts_transactions()","ebanqapi::requests#approve()","ebanqapi::client#auth()","ebanqapi::apipaths#auth_path()","ebanqapi::client#cards()","ebanqapi::apipaths#cards_path()","ebanqapi::templates#cft()","ebanqapi::configuration#config()","ebanqapi::settings#countries()","ebanqapi::requests#create()","ebanqapi::templates#create()","ebanqapi::requests#create_cft()","ebanqapi::requests#create_owt()","ebanqapi::requests#create_tba()","ebanqapi::requests#create_tbu()","ebanqapi::settings#currencies()","ebanqapi::client#delete()","ebanqapi::templates#delete()","ebanqapi::messages#delete_thread()","ebanqapi::settings#fee_types()","ebanqapi::settings#fields()","ebanqapi::client#get()","ebanqapi::client#headers()","ebanqapi::accounts#list()","ebanqapi::cards#list()","ebanqapi::messages#list()","ebanqapi::news#list()","ebanqapi::requests#list()","ebanqapi::settings#list()","ebanqapi::templates#list()","ebanqapi::profile#list_of_allowed_documents()","ebanqapi::auth#login()","ebanqapi::auth#login_by()","ebanqapi::auth#login_with_token()","ebanqapi::auth#logout()","ebanqapi::auth#logout_device()","ebanqapi::client#make_request()","ebanqapi::client#messages()","ebanqapi::apipaths#messages_path()","ebanqapi::accounts::new()","ebanqapi::additionalinfo::new()","ebanqapi::auth::new()","ebanqapi::beneficiarybank::new()","ebanqapi::beneficiarycustomer::new()","ebanqapi::cards::new()","ebanqapi::client::new()","ebanqapi::intermediarybank::new()","ebanqapi::messages::new()","ebanqapi::news::new()","ebanqapi::profile::new()","ebanqapi::reports::new()","ebanqapi::requests::new()","ebanqapi::settings::new()","ebanqapi::templates::new()","ebanqapi::transactions::new()","ebanqapi::client#news()","ebanqapi::apipaths#news_path()","ebanqapi::accounts#operation()","ebanqapi::messages#outgoing()","ebanqapi::templates#owt()","ebanqapi::client#parse_failed()","ebanqapi::auth#pass_reset_token()","ebanqapi::client#post()","ebanqapi::transactions#prepare()","ebanqapi::client#process_raw_response()","ebanqapi::client#process_response_body()","ebanqapi::client#profile()","ebanqapi::apipaths#profile_path()","ebanqapi::client#put()","ebanqapi::auth#refresh_token()","ebanqapi::client#reports()","ebanqapi::apipaths#reports_path()","ebanqapi::auth#request_new_password()","ebanqapi::client#requests()","ebanqapi::apipaths#requests_path()","ebanqapi::auth#reset_password()","ebanqapi::messages#send_to_a_group()","ebanqapi::messages#send_to_administrator()","ebanqapi::messages#send_to_all()","ebanqapi::client#settings()","ebanqapi::apipaths#settings_path()","ebanqapi::accounts#show()","ebanqapi::cards#show()","ebanqapi::messages#show()","ebanqapi::news#show()","ebanqapi::profile#show()","ebanqapi::requests#show()","ebanqapi::templates#show()","ebanqapi::transactions#show()","ebanqapi::reports#specific_account_statement()","ebanqapi::client#success?()","ebanqapi::templates#tbu()","ebanqapi::client#templates()","ebanqapi::apipaths#templates_path()","ebanqapi::common#to_hash()","ebanqapi::client#transactions()","ebanqapi::apipaths#transactions_path()","ebanqapi::reports#types()","ebanqapi::messages#unread_count()","ebanqapi::profile#update()","ebanqapi::settings#update()","ebanqapi::auth#update_push_token()","ebanqapi::auth#update_user_pin()","ebanqapi::responsewrapper#wrap()","ebanqapi::responsewrapper#wrap_hash()",""],"info":[["EbanqApi","","EbanqApi.html","","<p>ApiPaths module\n<p>Accounts block\n<p>Auth block\n"],["EbanqApi::Accounts","","EbanqApi/Accounts.html","","<p>This class represents an profile functional of Ebanq REST Api.\n"],["EbanqApi::AdditionalInfo","","EbanqApi/AdditionalInfo.html","","<p>This class represents an additional info functional of Ebanq REST Api for\nowt request.\n<p>Attributes\n<p><code>information_ref</code> …\n"],["EbanqApi::ApiPaths","","EbanqApi/ApiPaths.html","","<p>Forms endpoints\n"],["EbanqApi::Auth","","EbanqApi/Auth.html","","<p>This class represents an auth functional of Ebanq REST Api.\n"],["EbanqApi::BadGateway","","EbanqApi/BadGateway.html","","<p>BadGateway exception class.\n"],["EbanqApi::BadRequest","","EbanqApi/BadRequest.html","","<p>BadRequest exception class.\n"],["EbanqApi::BeneficiaryBank","","EbanqApi/BeneficiaryBank.html","","<p>This class represents an beneficiary bank functional of Ebanq REST Api for\nowt request.\n<p>Attributes\n<p><code>swift</code> …\n"],["EbanqApi::BeneficiaryCustomer","","EbanqApi/BeneficiaryCustomer.html","","<p>This class represents an beneficiary customer functional of Ebanq REST Api\nfor owt request.\n<p>Attributes …\n"],["EbanqApi::Cards","","EbanqApi/Cards.html","","<p>This class represents an cards functional of Ebanq REST Api.\n"],["EbanqApi::Client","","EbanqApi/Client.html","","<p>This class represents client functionality.\n"],["EbanqApi::Common","","EbanqApi/Common.html","","<p>Common owt block helpers\n"],["EbanqApi::Configuration","","EbanqApi/Configuration.html","","<p>Configuration module\n<p><code>base_url</code> - yourebanqdomain.com\n<p><code>token</code> - user token\n"],["EbanqApi::Forbidden","","EbanqApi/Forbidden.html","","<p>Forbidden exception class.\n"],["EbanqApi::GatewayTimeout","","EbanqApi/GatewayTimeout.html","","<p>GatewayTimeout exception class.\n"],["EbanqApi::IntermediaryBank","","EbanqApi/IntermediaryBank.html","","<p>This class represents an intermediary bank functional of Ebanq REST Api for\nowt request.\n<p>Attributes\n<p><code>swift</code> …\n"],["EbanqApi::InternalServerError","","EbanqApi/InternalServerError.html","","<p>InternalServerError exception class.\n"],["EbanqApi::InvalidSignature","","EbanqApi/InvalidSignature.html","","<p>InvalidSignature exception class.\n"],["EbanqApi::Messages","","EbanqApi/Messages.html","","<p>This class represents an messages functional of Ebanq REST Api.\n"],["EbanqApi::News","","EbanqApi/News.html","","<p>This class represents an news functional of Ebanq REST Api.\n"],["EbanqApi::NotAcceptable","","EbanqApi/NotAcceptable.html","","<p>NotAcceptable exception class.\n"],["EbanqApi::NotFound","","EbanqApi/NotFound.html","","<p>NotFound exception class.\n"],["EbanqApi::Profile","","EbanqApi/Profile.html","","<p>This class represents an profile functional of Ebanq REST Api.\n"],["EbanqApi::RateLimitExceeded","","EbanqApi/RateLimitExceeded.html","","<p>RateLimitExceeded exception class.\n"],["EbanqApi::Reports","","EbanqApi/Reports.html","","<p>This class represents an reports functional of Ebanq REST Api.\n"],["EbanqApi::Requests","","EbanqApi/Requests.html","","<p>This class represents an requests functional of Ebanq REST Api.\n"],["EbanqApi::ResponseWrapper","","EbanqApi/ResponseWrapper.html","","<p>Provides a helpers for wrapping of Ebanq API responses\n"],["EbanqApi::ServiceUnavailable","","EbanqApi/ServiceUnavailable.html","","<p>ServiceUnavailable exception class.\n"],["EbanqApi::Settings","","EbanqApi/Settings.html","","<p>This class represents an settings functional of Ebanq REST Api.\n"],["EbanqApi::Templates","","EbanqApi/Templates.html","","<p>This class represents an templates functional of Ebanq REST Api.\n"],["EbanqApi::TooManyRequests","","EbanqApi/TooManyRequests.html","","<p>TooManyRequests exception class.\n"],["EbanqApi::Transactions","","EbanqApi/Transactions.html","","<p>This class represents an transactions functional of Ebanq REST Api.\n"],["account_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-account_path","(action = '')","<p>Return /api/v1/accounts path\n"],["accounts","EbanqApi::Client","EbanqApi/Client.html#method-i-accounts","()","<p>Declares an accounts instance.\n"],["all_accounts_balances","EbanqApi::Reports","EbanqApi/Reports.html#method-i-all_accounts_balances","(options = {})","<p>Get report All Accounts Balances /api/v1/reports/aab\n<p>Attributes\n<p><code>options</code> - hash of options for request, …\n"],["all_accounts_transactions","EbanqApi::Reports","EbanqApi/Reports.html#method-i-all_accounts_transactions","(options = {})","<p>Get report All Accounts Transactions /api/v1/reports/aat\n<p>Attributes\n<p><code>options</code> - hash of options for request, …\n"],["approve","EbanqApi::Requests","EbanqApi/Requests.html#method-i-approve","(request_id)","<p>Approve one transfer request /api/v1/requests/approve\n<p>Attributes\n<p><code>request_id</code> (required) - (Number)\n"],["auth","EbanqApi::Client","EbanqApi/Client.html#method-i-auth","()","<p>Declares an auth instance.\n"],["auth_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-auth_path","(action = '')","<p>Return /api/v1/auth path\n"],["cards","EbanqApi::Client","EbanqApi/Client.html#method-i-cards","()","<p>Declares an cards instance.\n"],["cards_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-cards_path","(action = '')","<p>Return /api/v1/cards path\n"],["cft","EbanqApi::Templates","EbanqApi/Templates.html#method-i-cft","()","<p>List of all request templates cft /api/v1/templates/cft\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">templates</span>.<span class=\"ruby-identifier\">cft</span>\n</pre>\n"],["config","EbanqApi::Configuration","EbanqApi/Configuration.html#method-i-config","()",""],["countries","EbanqApi::Settings","EbanqApi/Settings.html#method-i-countries","()","<p>Load specific system settings (countries) /api/v1/settings/countries\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">settings</span>.<span class=\"ruby-identifier\">countries</span>\n</pre>\n"],["create","EbanqApi::Requests","EbanqApi/Requests.html#method-i-create","(type, params)",""],["create","EbanqApi::Templates","EbanqApi/Templates.html#method-i-create","()","<p>Create a Transfer Request template /api/v1/templates\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">templates</span>.<span class=\"ruby-identifier\">create</span>\n</pre>\n"],["create_cft","EbanqApi::Requests","EbanqApi/Requests.html#method-i-create_cft","(params)","<p>Create CFT request /api/v1/requests/cft\n<p>Attributes\n<p><code>params</code> - hash of params for request,\n"],["create_owt","EbanqApi::Requests","EbanqApi/Requests.html#method-i-create_owt","(params)","<p>Create OWT request /api/v1/requests/owt\n<p>Attributes\n<p><code>options</code> - hash of options for request,\n"],["create_tba","EbanqApi::Requests","EbanqApi/Requests.html#method-i-create_tba","(params)","<p>Create TBA request /api/v1/requests/tba\n<p>Attributes\n<p><code>params</code> - hash of params for request,\n"],["create_tbu","EbanqApi::Requests","EbanqApi/Requests.html#method-i-create_tbu","(params)","<p>Create TBU request /api/v1/requests/tbu\n<p>Attributes\n<p><code>params</code> - hash of params for request,\n"],["currencies","EbanqApi::Settings","EbanqApi/Settings.html#method-i-currencies","()","<p>Load specific system settings (currencies) /api/v1/settings/currencies\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">settings</span>.<span class=\"ruby-identifier\">currencies</span>\n</pre>\n"],["delete","EbanqApi::Client","EbanqApi/Client.html#method-i-delete","(path, headers)",""],["delete","EbanqApi::Templates","EbanqApi/Templates.html#method-i-delete","(id)","<p>Delete a Transfer Request Template /api/v1/templates/{id}\n<p>Attributes\n<p><code>id</code> (required) - The id of the template …\n"],["delete_thread","EbanqApi::Messages","EbanqApi/Messages.html#method-i-delete_thread","(id)","<p>Delete messages thread /api/v1/messages/{id}\n<p>Attributes\n<p><code>id</code> (required) - Thread ID. (Number)\n"],["fee_types","EbanqApi::Settings","EbanqApi/Settings.html#method-i-fee_types","()","<p>Load specific system settings /api/v1/settings/fee-types\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">settings</span>.<span class=\"ruby-identifier\">fee_types</span>\n</pre>\n"],["fields","EbanqApi::Settings","EbanqApi/Settings.html#method-i-fields","()","<p>Retrieve user&#39;s profile data /api/v1/settings/fields\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">settings</span>.<span class=\"ruby-identifier\">fields</span>\n</pre>\n"],["get","EbanqApi::Client","EbanqApi/Client.html#method-i-get","(path, headers, params = {})",""],["headers","EbanqApi::Client","EbanqApi/Client.html#method-i-headers","()",""],["list","EbanqApi::Accounts","EbanqApi/Accounts.html#method-i-list","(uid = '')","<p>List of all accounts belonging to user. If endpoint is requested by\nbank-admin then it returns all accounts …\n"],["list","EbanqApi::Cards","EbanqApi/Cards.html#method-i-list","()","<p>List all cards belonging to user /api/v1/cards\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">cards</span>.<span class=\"ruby-identifier\">list</span>\n</pre>\n"],["list","EbanqApi::Messages","EbanqApi/Messages.html#method-i-list","(options = {})","<p>List of all incoming messages /api/v1/messages\n<p>Attributes\n<p><code>options</code> - hash of options for request,\n"],["list","EbanqApi::News","EbanqApi/News.html#method-i-list","(options = {})","<p>List of all News entries /api/v1/news\n<p>Attributes\n<p><code>options</code> - hash of options for request, e.g. {page: 1} …\n"],["list","EbanqApi::Requests","EbanqApi/Requests.html#method-i-list","(options = {})","<p>Get a list of all transfer request /api/v1/requests/\n<p>Attributes\n<p><code>options</code> - hash of options for request, …\n"],["list","EbanqApi::Settings","EbanqApi/Settings.html#method-i-list","()","<p>Get User Settings /api/v1/settings\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">settings</span>.<span class=\"ruby-identifier\">list</span>\n</pre>\n"],["list","EbanqApi::Templates","EbanqApi/Templates.html#method-i-list","()","<p>Get list of all templates /api/v1/templates\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">templates</span>.<span class=\"ruby-identifier\">list</span>\n</pre>\n"],["list_of_allowed_documents","EbanqApi::Profile","EbanqApi/Profile.html#method-i-list_of_allowed_documents","()","<p>Get list of allowed documents /api/v1/profile/\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">profile</span>.<span class=\"ruby-identifier\">list_of_allowed_documents</span>\n</pre>\n"],["login","EbanqApi::Auth","EbanqApi/Auth.html#method-i-login","(username, password, device_id, push_token = '')","<p>Login a user for a new session /api/v1/auth/login\n<p>Attributes\n<p><code>username</code> (required) - A valid username (String) …\n"],["login_by","EbanqApi::Auth","EbanqApi/Auth.html#method-i-login_by","(pin, device_id, push_token)","<p>Login by PIN and Device ID /api/v1/auth/login_pin\n<p>Attributes\n<p><code>pin</code> (required) - PIN code (String)\n"],["login_with_token","EbanqApi::Auth","EbanqApi/Auth.html#method-i-login_with_token","(token, secret)","<p>Login a user for a new session using token and secret. Endpoint for third\nparty clients. /api/v1/auth/login_token …\n"],["logout","EbanqApi::Auth","EbanqApi/Auth.html#method-i-logout","()","<p>Logout a user session /api/v1/auth/logout\n"],["logout_device","EbanqApi::Auth","EbanqApi/Auth.html#method-i-logout_device","(device_id)","<p>Logout a user session by device id only /api/v1/auth/logout_device\n<p>Attributes\n<p><code>device_id</code> (required) - Device …\n"],["make_request","EbanqApi::Client","EbanqApi/Client.html#method-i-make_request","(method, url, params = {})","<p>Makes a request to Ebanq REST Api.\n<p>Attributes\n<p><code>method</code> - :get or :post value\n"],["messages","EbanqApi::Client","EbanqApi/Client.html#method-i-messages","()","<p>Declares an messages instance.\n"],["messages_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-messages_path","(action = '')","<p>Return /api/v1/messages path\n"],["new","EbanqApi::Accounts","EbanqApi/Accounts.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::AdditionalInfo","EbanqApi/AdditionalInfo.html#method-c-new","(information_ref = '')",""],["new","EbanqApi::Auth","EbanqApi/Auth.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::BeneficiaryBank","EbanqApi/BeneficiaryBank.html#method-c-new","(swift = '', name = '', address = '', location = '', country = '', abartn = '')",""],["new","EbanqApi::BeneficiaryCustomer","EbanqApi/BeneficiaryCustomer.html#method-c-new","(name = '', address = '', iban = '')",""],["new","EbanqApi::Cards","EbanqApi/Cards.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Client","EbanqApi/Client.html#method-c-new","()","<p>Requests service_token for current user.\n"],["new","EbanqApi::IntermediaryBank","EbanqApi/IntermediaryBank.html#method-c-new","(swift = '', name = '', address = '', location = '', country = '', abartn = '', iban = '')",""],["new","EbanqApi::Messages","EbanqApi/Messages.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::News","EbanqApi/News.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Profile","EbanqApi/Profile.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Reports","EbanqApi/Reports.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Requests","EbanqApi/Requests.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Settings","EbanqApi/Settings.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Templates","EbanqApi/Templates.html#method-c-new","(client)","<p>Declares an client instance.\n"],["new","EbanqApi::Transactions","EbanqApi/Transactions.html#method-c-new","(client)","<p>Declares an client instance.\n"],["news","EbanqApi::Client","EbanqApi/Client.html#method-i-news","()","<p>Declares an news instance.\n"],["news_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-news_path","(action = '')","<p>Return /api/v1/news path\n"],["operation","EbanqApi::Accounts","EbanqApi/Accounts.html#method-i-operation","(operation, account_id, amount, description, options = {})","<p>Executes manual transaction - debit or credit /api/v1/accounts/operation/\n<p>Attributes\n<p><code>operation</code> (required) …\n"],["outgoing","EbanqApi::Messages","EbanqApi/Messages.html#method-i-outgoing","(options = {})","<p>Retrieve all outgoing messages /api/v1/messages/outgoing\n<p>Attributes\n<p><code>options</code> - hash of options for request, …\n"],["owt","EbanqApi::Templates","EbanqApi/Templates.html#method-i-owt","()","<p>List of all request templates owt /api/v1/templates/owt\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">templates</span>.<span class=\"ruby-identifier\">owt</span>\n</pre>\n"],["parse_failed","EbanqApi::Client","EbanqApi/Client.html#method-i-parse_failed","(response)",""],["pass_reset_token","EbanqApi::Auth","EbanqApi/Auth.html#method-i-pass_reset_token","(uid, timestamp, hashed_pass)","<p>Process one time login link and return the pass_reset\n/api/v1/auth/user_pass_reset\n<p>Attributes\n<p><code>uid</code> (required) …\n"],["post","EbanqApi::Client","EbanqApi/Client.html#method-i-post","(path, headers, params = {})",""],["prepare","EbanqApi::Transactions","EbanqApi/Transactions.html#method-i-prepare","(type, account_from, account_to, amount, options = {})","<p>Get all transaction types and information for transfers\n/api/v1/transaction/prepare/\n<p>Attributes\n<p><code>type</code> (required) …\n"],["process_raw_response","EbanqApi::Client","EbanqApi/Client.html#method-i-process_raw_response","(raw_response)",""],["process_response_body","EbanqApi::Client","EbanqApi/Client.html#method-i-process_response_body","(raw_response)",""],["profile","EbanqApi::Client","EbanqApi/Client.html#method-i-profile","()","<p>Declares an profile instance.\n"],["profile_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-profile_path","(action = '')","<p>Return /api/v1/profile path\n"],["put","EbanqApi::Client","EbanqApi/Client.html#method-i-put","(path, headers, params = {})",""],["refresh_token","EbanqApi::Auth","EbanqApi/Auth.html#method-i-refresh_token","(pin, device_id)","<p>Get token (Refresh token) /api/v1/auth/token\n<p>Attributes\n<p><code>pin</code> (required) - PIN code (String)\n"],["reports","EbanqApi::Client","EbanqApi/Client.html#method-i-reports","()","<p>Declares an reports instance.\n"],["reports_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-reports_path","(action = '')","<p>Return /api/v1/reports path\n"],["request_new_password","EbanqApi::Auth","EbanqApi/Auth.html#method-i-request_new_password","(name)","<p>Request a new password, given a user name or e-mail address\n/api/v1/auth/request_new_password\n<p>Attributes …\n"],["requests","EbanqApi::Client","EbanqApi/Client.html#method-i-requests","()","<p>Declares an requests instance.\n"],["requests_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-requests_path","(action = '')","<p>Return /api/v1/requests path\n"],["reset_password","EbanqApi::Auth","EbanqApi/Auth.html#method-i-reset_password","(uid)","<p>Password reset /api/v1/auth/uid/password_reset\n<p>Attributes\n<p><code>uid</code> (required) - The id of the user (Number) …\n"],["send_to_a_group","EbanqApi::Messages","EbanqApi/Messages.html#method-i-send_to_a_group","(subject, body, recipient = '', thread_id = '')","<p>Send message to a group /api/v1/messages/send/groups/\n<p>Attributes\n<p><code>subject</code> (required) - (String)\n"],["send_to_administrator","EbanqApi::Messages","EbanqApi/Messages.html#method-i-send_to_administrator","(subject, body, recipient = '', thread_id = '')","<p>Send message to administrator /api/v1/messages/send\n<p>Attributes\n<p><code>subject</code> (required) - (String)\n"],["send_to_all","EbanqApi::Messages","EbanqApi/Messages.html#method-i-send_to_all","(subject, body, thread_id = '')","<p>Send message to all users api/v1/messages/send/all\n<p>Attributes\n<p><code>subject</code> (required) - (String)\n"],["settings","EbanqApi::Client","EbanqApi/Client.html#method-i-settings","()","<p>Declares an settings instance.\n"],["settings_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-settings_path","(action = '')","<p>Return /api/v1/settings path\n"],["show","EbanqApi::Accounts","EbanqApi/Accounts.html#method-i-show","(id, options = {})","<p>Retrieve an account /api/v1/accounts/{id}\n<p>Attributes\n<p><code>id</code> (required) - The ID of the account\n"],["show","EbanqApi::Cards","EbanqApi/Cards.html#method-i-show","(id)","<p>Retrieve a Card /api/v1/cards/{id}/\n<p>Attributes\n<p><code>id</code> (required) - The ID of the card to retrieve. (Number) …\n"],["show","EbanqApi::Messages","EbanqApi/Messages.html#method-i-show","(id)","<p>Retrieve a message /api/v1/messages/{id}\n<p>Attributes\n<p><code>id</code> (required) - Message id (Number)\n"],["show","EbanqApi::News","EbanqApi/News.html#method-i-show","(id)","<p>Retrieve News entry /api/v1/news/{id}\n<p>Attributes\n<p><code>id</code> (required) - the ID of the news to retrieve. (Number) …\n"],["show","EbanqApi::Profile","EbanqApi/Profile.html#method-i-show","(uid)","<p>Get user profile data. /api/v1/auth/{uid}\n<p>Attributes\n<p><code>uid</code> (required) - The id of the user (Number)\n"],["show","EbanqApi::Requests","EbanqApi/Requests.html#method-i-show","(id)","<p>Get one transfer request /api/v1/requests/{id}\n<p>Attributes\n<p><code>id</code> (required) - Id of the transfer request (Number) …\n"],["show","EbanqApi::Templates","EbanqApi/Templates.html#method-i-show","(id)","<p>Retrieve a Transfer Request template /api/v1/templates/{id}\n<p>Attributes\n<p><code>id</code> (required) - The id of the template …\n"],["show","EbanqApi::Transactions","EbanqApi/Transactions.html#method-i-show","(id)","<p>Retrieve a transaction /api/v1/transaction/{id}\n<p>Attributes\n<p><code>id</code> (required) - Transaction id (Number)\n"],["specific_account_statement","EbanqApi::Reports","EbanqApi/Reports.html#method-i-specific_account_statement","(account_id, options = {})","<p>Get report Specific Account Statement /api/v1/reports/sas\n<p>Attributes\n<p><code>account_id</code> (required) -The ID of the …\n"],["success?","EbanqApi::Client","EbanqApi/Client.html#method-i-success-3F","(code)",""],["tbu","EbanqApi::Templates","EbanqApi/Templates.html#method-i-tbu","()","<p>List of all request templates tbu /api/v1/templates/tbu\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">templates</span>.<span class=\"ruby-identifier\">tbu</span>\n</pre>\n"],["templates","EbanqApi::Client","EbanqApi/Client.html#method-i-templates","()","<p>Declares an templates instance.\n"],["templates_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-templates_path","(action = '')","<p>Return /api/v1/templates path\n"],["to_hash","EbanqApi::Common","EbanqApi/Common.html#method-i-to_hash","()","<p>Transform object to hash\n"],["transactions","EbanqApi::Client","EbanqApi/Client.html#method-i-transactions","()",""],["transactions_path","EbanqApi::ApiPaths","EbanqApi/ApiPaths.html#method-i-transactions_path","(action = '')","<p>Return /api/v1/transactions path\n"],["types","EbanqApi::Reports","EbanqApi/Reports.html#method-i-types","()","<p>Get all available Report types /api/v1/reports\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">reports</span>.<span class=\"ruby-identifier\">types</span>\n</pre>\n"],["unread_count","EbanqApi::Messages","EbanqApi/Messages.html#method-i-unread_count","()","<p>Get unread messages count /api/v1/messages/unread-count\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">client</span>.<span class=\"ruby-identifier\">messages</span>.<span class=\"ruby-identifier\">unread_count</span>\n</pre>\n"],["update","EbanqApi::Profile","EbanqApi/Profile.html#method-i-update","(uid, params)","<p>Update user profile data /api/v1/auth/{uid}\n<p>Attributes\n<p><code>uid</code> (required) - The id of the user (Number)\n"],["update","EbanqApi::Settings","EbanqApi/Settings.html#method-i-update","(security_question_id, security_question_answer, options = {})","<p>Update user security question and password /api/v1/settings/update\n<p>Attributes\n<p><code>security_question_id</code> (required) …\n"],["update_push_token","EbanqApi::Auth","EbanqApi/Auth.html#method-i-update_push_token","(token, os_type)","<p>Set push token api/v1/auth/push_token\n<p>Attributes\n<p><code>token</code> (required) - Push token (String)\n"],["update_user_pin","EbanqApi::Auth","EbanqApi/Auth.html#method-i-update_user_pin","(pin)","<p>Set user pin /api/v1/auth/pin\n<p>Attributes\n<p><code>pin</code> (required) - PIN code (String)\n"],["wrap","EbanqApi::ResponseWrapper","EbanqApi/ResponseWrapper.html#method-i-wrap","(response)","<p>Transform Ebanq API response to OpenStruct data structure in case it is a\nhash. Otherwise returns ruby …\n"],["wrap_hash","EbanqApi::ResponseWrapper","EbanqApi/ResponseWrapper.html#method-i-wrap_hash","(response)",""],["README","","README_md.html","","<p>EbanqApi\n<p>A wrapper for the EBANQ Rest API. Specification is as described in the the\ndeveloper documentation …\n"]]}}